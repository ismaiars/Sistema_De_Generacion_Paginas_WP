name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8 mypy
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Type checking with mypy
      run: |
        mypy programa_2.py --ignore-missing-imports
    
    - name: Test basic functionality
      run: |
        python -c "import programa_2; print('Import successful')"
        python -c "import tkinter; print('Tkinter available')"
    
    - name: Validate project structure
      run: |
        python -c "
        import os
        required_files = ['programa_2.py', 'README.md', 'requirements.txt', '.gitignore']
        for file in required_files:
            assert os.path.exists(file), f'Missing required file: {file}'
        print('All required files present')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: [test, security]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate README
      run: |
        # Check if README.md exists and has content
        [ -f README.md ] && [ -s README.md ]
        echo "README.md validation passed"
    
    - name: Check documentation links
      run: |
        # Basic check for common documentation files
        files=("README.md" "CONTRIBUTING.md" "LICENSE")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done
    
    - name: Validate project metadata
      run: |
        python -c "
        import os
        # Check if setup.py has required metadata
        if os.path.exists('setup.py'):
            with open('setup.py', 'r') as f:
                content = f.read()
                required = ['name=', 'version=', 'author=', 'description=']
                for req in required:
                    assert req in content, f'Missing {req} in setup.py'
            print('setup.py validation passed')
        "